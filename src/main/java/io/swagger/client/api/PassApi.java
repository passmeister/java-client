/*
 * Demo Client for Passmeister Apple Wallet and Google Wallet API
 * [www.passmeister.com](https://www.passmeister.com).
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PassApi {
    private ApiClient apiClient;

    public PassApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PassApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createOrUpdatePass
     * @param passTypeId your pass type id, for example P963493 (Urban Fitness) (required)
     * @param passId id of the pass (provided by you when creating the pass or automatically set by passmeister) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createOrUpdatePassCall(Object passTypeId, Object passId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pass";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (passTypeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("passTypeId", passTypeId));
        if (passId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("passId", passId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createOrUpdatePassValidateBeforeCall(Object passTypeId, Object passId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'passTypeId' is set
        if (passTypeId == null) {
            throw new ApiException("Missing the required parameter 'passTypeId' when calling createOrUpdatePass(Async)");
        }
        

        com.squareup.okhttp.Call call = createOrUpdatePassCall(passTypeId, passId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This method creates or (if the pass id already exists) updates a pass, so you don&#39;t have to track ids and creation status of your passes.
     * This method creates or (if the pass id already exists) updates a pass, so you don&#39;t have to track ids and creation status of your passes.
     * @param passTypeId your pass type id, for example P963493 (Urban Fitness) (required)
     * @param passId id of the pass (provided by you when creating the pass or automatically set by passmeister) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createOrUpdatePass(Object passTypeId, Object passId) throws ApiException {
        createOrUpdatePassWithHttpInfo(passTypeId, passId);
    }

    /**
     * This method creates or (if the pass id already exists) updates a pass, so you don&#39;t have to track ids and creation status of your passes.
     * This method creates or (if the pass id already exists) updates a pass, so you don&#39;t have to track ids and creation status of your passes.
     * @param passTypeId your pass type id, for example P963493 (Urban Fitness) (required)
     * @param passId id of the pass (provided by you when creating the pass or automatically set by passmeister) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createOrUpdatePassWithHttpInfo(Object passTypeId, Object passId) throws ApiException {
        com.squareup.okhttp.Call call = createOrUpdatePassValidateBeforeCall(passTypeId, passId, null, null);
        return apiClient.execute(call);
    }

    /**
     * This method creates or (if the pass id already exists) updates a pass, so you don&#39;t have to track ids and creation status of your passes. (asynchronously)
     * This method creates or (if the pass id already exists) updates a pass, so you don&#39;t have to track ids and creation status of your passes.
     * @param passTypeId your pass type id, for example P963493 (Urban Fitness) (required)
     * @param passId id of the pass (provided by you when creating the pass or automatically set by passmeister) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createOrUpdatePassAsync(Object passTypeId, Object passId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createOrUpdatePassValidateBeforeCall(passTypeId, passId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deletePass
     * @param passTypeId your pass type id, for example P963493 (Urban Fitness) (required)
     * @param passId id of the pass (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePassCall(Object passTypeId, Object passId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pass";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (passTypeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("passTypeId", passTypeId));
        if (passId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("passId", passId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePassValidateBeforeCall(Object passTypeId, Object passId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'passTypeId' is set
        if (passTypeId == null) {
            throw new ApiException("Missing the required parameter 'passTypeId' when calling deletePass(Async)");
        }
        
        // verify the required parameter 'passId' is set
        if (passId == null) {
            throw new ApiException("Missing the required parameter 'passId' when calling deletePass(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePassCall(passTypeId, passId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete pass by pass id.
     * Delete pass by pass id.
     * @param passTypeId your pass type id, for example P963493 (Urban Fitness) (required)
     * @param passId id of the pass (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePass(Object passTypeId, Object passId) throws ApiException {
        deletePassWithHttpInfo(passTypeId, passId);
    }

    /**
     * Delete pass by pass id.
     * Delete pass by pass id.
     * @param passTypeId your pass type id, for example P963493 (Urban Fitness) (required)
     * @param passId id of the pass (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePassWithHttpInfo(Object passTypeId, Object passId) throws ApiException {
        com.squareup.okhttp.Call call = deletePassValidateBeforeCall(passTypeId, passId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete pass by pass id. (asynchronously)
     * Delete pass by pass id.
     * @param passTypeId your pass type id, for example P963493 (Urban Fitness) (required)
     * @param passId id of the pass (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePassAsync(Object passTypeId, Object passId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePassValidateBeforeCall(passTypeId, passId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getPass
     * @param passTypeId your pass type id, for example P963493 (Urban Fitness) (required)
     * @param passId id of the pass (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPassCall(Object passTypeId, Object passId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pass";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (passTypeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("passTypeId", passTypeId));
        if (passId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("passId", passId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPassValidateBeforeCall(Object passTypeId, Object passId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'passTypeId' is set
        if (passTypeId == null) {
            throw new ApiException("Missing the required parameter 'passTypeId' when calling getPass(Async)");
        }
        
        // verify the required parameter 'passId' is set
        if (passId == null) {
            throw new ApiException("Missing the required parameter 'passId' when calling getPass(Async)");
        }
        

        com.squareup.okhttp.Call call = getPassCall(passTypeId, passId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get pass information by pass id.
     * Get pass information by pass id.
     * @param passTypeId your pass type id, for example P963493 (Urban Fitness) (required)
     * @param passId id of the pass (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getPass(Object passTypeId, Object passId) throws ApiException {
        getPassWithHttpInfo(passTypeId, passId);
    }

    /**
     * Get pass information by pass id.
     * Get pass information by pass id.
     * @param passTypeId your pass type id, for example P963493 (Urban Fitness) (required)
     * @param passId id of the pass (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getPassWithHttpInfo(Object passTypeId, Object passId) throws ApiException {
        com.squareup.okhttp.Call call = getPassValidateBeforeCall(passTypeId, passId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get pass information by pass id. (asynchronously)
     * Get pass information by pass id.
     * @param passTypeId your pass type id, for example P963493 (Urban Fitness) (required)
     * @param passId id of the pass (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPassAsync(Object passTypeId, Object passId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPassValidateBeforeCall(passTypeId, passId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for passList
     * @param passTypeId your pass type id, for example P963493 (Urban Fitness) (required)
     * @param page  (optional)
     * @param limit  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call passListCall(Object passTypeId, Object page, Object limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pass/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (passTypeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("passTypeId", passTypeId));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call passListValidateBeforeCall(Object passTypeId, Object page, Object limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'passTypeId' is set
        if (passTypeId == null) {
            throw new ApiException("Missing the required parameter 'passTypeId' when calling passList(Async)");
        }
        

        com.squareup.okhttp.Call call = passListCall(passTypeId, page, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve the list of active pass ids for a given pass type.
     * Retrieve the list of active pass ids for a given pass type.
     * @param passTypeId your pass type id, for example P963493 (Urban Fitness) (required)
     * @param page  (optional)
     * @param limit  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void passList(Object passTypeId, Object page, Object limit) throws ApiException {
        passListWithHttpInfo(passTypeId, page, limit);
    }

    /**
     * Retrieve the list of active pass ids for a given pass type.
     * Retrieve the list of active pass ids for a given pass type.
     * @param passTypeId your pass type id, for example P963493 (Urban Fitness) (required)
     * @param page  (optional)
     * @param limit  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> passListWithHttpInfo(Object passTypeId, Object page, Object limit) throws ApiException {
        com.squareup.okhttp.Call call = passListValidateBeforeCall(passTypeId, page, limit, null, null);
        return apiClient.execute(call);
    }

    /**
     * Retrieve the list of active pass ids for a given pass type. (asynchronously)
     * Retrieve the list of active pass ids for a given pass type.
     * @param passTypeId your pass type id, for example P963493 (Urban Fitness) (required)
     * @param page  (optional)
     * @param limit  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call passListAsync(Object passTypeId, Object page, Object limit, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = passListValidateBeforeCall(passTypeId, page, limit, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for passSync
     * @param passTypeId your pass type id, for example P963493 (Urban Fitness) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call passSyncCall(Object passTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pass/sync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (passTypeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("passTypeId", passTypeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call passSyncValidateBeforeCall(Object passTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'passTypeId' is set
        if (passTypeId == null) {
            throw new ApiException("Missing the required parameter 'passTypeId' when calling passSync(Async)");
        }
        

        com.squareup.okhttp.Call call = passSyncCall(passTypeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Send updates to all active passes for a given pass type.
     * For example: you changed the pass type layout and now you want to update all installed passes. (The API call only confirms the scheduling of the updates, actual updating of passes on your customers devices can take a while.)
     * @param passTypeId your pass type id, for example P963493 (Urban Fitness) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void passSync(Object passTypeId) throws ApiException {
        passSyncWithHttpInfo(passTypeId);
    }

    /**
     * Send updates to all active passes for a given pass type.
     * For example: you changed the pass type layout and now you want to update all installed passes. (The API call only confirms the scheduling of the updates, actual updating of passes on your customers devices can take a while.)
     * @param passTypeId your pass type id, for example P963493 (Urban Fitness) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> passSyncWithHttpInfo(Object passTypeId) throws ApiException {
        com.squareup.okhttp.Call call = passSyncValidateBeforeCall(passTypeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Send updates to all active passes for a given pass type. (asynchronously)
     * For example: you changed the pass type layout and now you want to update all installed passes. (The API call only confirms the scheduling of the updates, actual updating of passes on your customers devices can take a while.)
     * @param passTypeId your pass type id, for example P963493 (Urban Fitness) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call passSyncAsync(Object passTypeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = passSyncValidateBeforeCall(passTypeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
