/*
 * Demo Client for Passmeister Apple Wallet and Google Wallet API
 * [www.passmeister.com](https://www.passmeister.com).
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PassApi
 */
@Ignore
public class PassApiTest {

    private final PassApi api = new PassApi();

    
    /**
     * This method creates or (if the pass id already exists) updates a pass, so you don&#39;t have to track ids and creation status of your passes.
     *
     * This method creates or (if the pass id already exists) updates a pass, so you don&#39;t have to track ids and creation status of your passes.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createOrUpdatePassTest() throws Exception {
        Object passTypeId = null;
        Object passId = null;
        api.createOrUpdatePass(passTypeId, passId);

        // TODO: test validations
    }
    
    /**
     * Delete pass by pass id.
     *
     * Delete pass by pass id.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deletePassTest() throws Exception {
        Object passTypeId = null;
        Object passId = null;
        api.deletePass(passTypeId, passId);

        // TODO: test validations
    }
    
    /**
     * Get pass information by pass id.
     *
     * Get pass information by pass id.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPassTest() throws Exception {
        Object passTypeId = null;
        Object passId = null;
        api.getPass(passTypeId, passId);

        // TODO: test validations
    }
    
    /**
     * Retrieve the list of active pass ids for a given pass type.
     *
     * Retrieve the list of active pass ids for a given pass type.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void passListTest() throws Exception {
        Object passTypeId = null;
        Object page = null;
        Object limit = null;
        api.passList(passTypeId, page, limit);

        // TODO: test validations
    }
    
    /**
     * Send updates to all active passes for a given pass type.
     *
     * For example: you changed the pass type layout and now you want to update all installed passes. (The API call only confirms the scheduling of the updates, actual updating of passes on your customers devices can take a while.)
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void passSyncTest() throws Exception {
        Object passTypeId = null;
        api.passSync(passTypeId);

        // TODO: test validations
    }
    
}
